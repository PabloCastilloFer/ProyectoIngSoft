const crearTareaRealizada = async (req, res) => {
    try {
        const { tareaId,estado } = req.body;
        const archivoAdjunto = req.file.filename;
        const URL = `http://${HOST}:${PORT}/api/tareaRealizada/src/upload/`;

        // Buscar el ticket asociado a la tarea y al usuario
        const ticket = await Ticket.findOne({ tarea: tareaId, asignadoA: req.user.rut });

        if (!ticket) {
            return res.status(404).json({ message: 'Tarea asignada no encontrada' });
        }

        // Verificar que estamos dentro del plazo
        const now = new Date();
        if (now < new Date(ticket.Inicio) || now > new Date(ticket.Fin)) {
            return res.status(400).json({ message: 'Tarea asignada fuera de plazo' });
        }

        // Buscar la tarea asociada
        const tarea = await Tarea.findById(tareaId);

        if (!tarea) {
            return res.status(404).json({ message: 'Tarea no encontrada' });
        }

        // Validar el estado de la tarea realizada
        const estadosPermitidos = ['completa', 'incompleta', 'no realizada'];
        if (!estadosPermitidos.includes(estado)) {
            return res.status(400).json({ message: 'Estado no v√°lido' });
        }

        const nuevaTareaRealizada = new TareaRealizada({
            tarea: tareaId,
            comentario: req.body.comentario,
            archivo: URL + archivoAdjunto,
            estado: req.body.estado,
        });

        const tareaRealizada = await nuevaTareaRealizada.save();

        // Actualizar el estado de la tarea original
        tarea.estado = estado;
        await tarea.save();

        res.status(201).json({
            message: 'Tarea realizada completada exitosamente',
            tareaRealizada
        });
    } catch (error) {
        res.status(500).json({ message: error.message });
    }
};